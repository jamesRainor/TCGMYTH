generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String?
  isAdmin   Boolean  @default(false)
  orders    Order[]
  posts     Post[]
  reviews   Review[]
  createdAt DateTime @default(now())
}

model Product {
  id                  String   @id @default(cuid())
  name                String
  slug                String   @unique
  description         String
  priceCents          Int
  pricePreorderCents  Int?
  stock               Int      @default(0)
  imageUrl            String?
  published           Boolean  @default(true)
  isPreorder          Boolean  @default(false)
  preorderStart       DateTime?
  preorderEnd         DateTime?
  preorderCap         Int?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  orderItems          OrderItem[]
  waitlist            WaitlistEntry[]
}

model Order {
  id              String       @id @default(cuid())
  userId          String?
  user            User?        @relation(fields: [userId], references: [id])
  status          OrderStatus  @default(PENDING)
  totalCents      Int
  shippingMethod  String
  shippingAddress Json
  paymentProvider String
  paymentIntentId String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  items           OrderItem[]
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  priceCents Int
  order      Order   @relation(fields: [orderId], references: [id])
  product    Product @relation(fields: [productId], references: [id])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String
  published Boolean  @default(true)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HeroSlide {
  id        String   @id @default(cuid())
  imageUrl  String
  title     String?
  subtitle  String?
  ctaLabel  String?
  ctaHref   String?
  position  Int      @default(0)
  isActive  Boolean  @default(true)
  startAt   DateTime?
  endAt     DateTime?
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(cuid())
  userName  String
  rating    Int      @default(5)
  comment   String
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}

model WaitlistEntry {
  id         String   @id @default(cuid())
  email      String
  productId  String
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])
}
